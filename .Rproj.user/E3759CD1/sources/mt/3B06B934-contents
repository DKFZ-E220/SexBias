---
title: "Untitled"
output: html_document
date: "2024-04-04"
---

```{r}
library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
library(UCell)

library(patchwork)
library(harmony)
library(rliger)
library(reshape2)
library(RColorBrewer)
library(dplyr)
library(stringr) 
library(plyr)

library(GSVA)
library(GSEABase)
library(GSVAdata)
library(ggplot2)

library(ProjecTILs)
library(STACAS)
library(ggplot2)
library(SignatuR)
library(UCell)
```

```{r}
grouping <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/Tumor_combined/Grouping_per_dataset.rds")
cell_patient_mapping <- data.frame(Patient = HNSC_combined_tumor$Patient) %>% 
  left_join(grouping, by = "Patient")
rownames(cell_patient_mapping) <- colnames(HNSC_combined_tumor)

# Use AddMetaData to add each column

for(col in colnames(grouping)[-2]) { # Assuming the first column is 'Patient', which we already have
  HNSC_combined_tumor <- AddMetaData(object = HNSC_combined_tumor, metadata = cell_patient_mapping[[col]], col.name = col)
}
HNSC_combined_tumor[["Group"]][is.na(HNSC_combined_tumor[["Group"]])] <- "Female"

HNSC_combined_tumor@meta.data$Chr_Dosage <- case_when(
  HNSC_combined_tumor@meta.data$Group == "High" ~ "XY",
  HNSC_combined_tumor@meta.data$Group == "Low" ~ "X0",
  HNSC_combined_tumor@meta.data$Group == "Female" ~ "XX",
  HNSC_combined_tumor@meta.data$Group == "Intermediate" ~ "intermediate",
  TRUE ~ NA_character_  # Handles any other unforeseen cases
)
```

```{r}
#!/software/r/4.2.0/bin/Rscript
#BSUB -q highmem
#BSUB -n 4 
#BSUB -R "span[hosts=1]"
#BSUB -R "rusage[mem=500GB]"
#BSUB -J Merge
#BSUB -u cristina.condelopez@dkfz-heidelberg.de

library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
library(UCell)

library(patchwork)
library(harmony)
library(rliger)
library(reshape2)
library(RColorBrewer)
library(dplyr)
library(stringr) 
library(plyr)

library(GSVA)
library(GSEABase)
library(GSVAdata)
library(ggplot2)

library(ProjecTILs)
library(STACAS)
library(ggplot2)
library(SignatuR)
library(UCell)

HNSC_combined <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/male_female_clean.rds")

HNSC_combined@meta.data$Dataset <- sub("_.*", "", rownames(HNSC_combined@meta.data))

cells <- revalue(HNSC_combined@meta.data$Cell_Type, c("NK-cell"="NK Cells", "T-cell"="T Cells", "T.cells"="T Cells", "T_cells"="T Cells", "B-Cells" = "B Cells", "B-cell" = "B Cells", "B_cells" = "B Cells", "Macrophage" = "Macrophages", "Epithelial" =  "Epithelial Cells", "NormalEpith" =  "Epithelial Cells", "Mast.cells" = "Mast Cells", "Mast cell" = "Mast Cells", "Endothelial" = "Endothelial Cells", "Endothelial_cells"= "Endothelial Cells", "Endothelial.cells" = "Endothelial Cells", "Fibroblast" = "Fibroblasts", "Dendritic_cells" = "Denditric Cells", "Dendritic.cells" = "Denditric Cells", "Malignant.cells" = "Tumor"))

cells <- revalue(cells, c("Epithelial.cells"="Epithelial Cells", "Mast_cells"="Mast Cells", "B_Plasma.cells"="Plasma cell", "27" ="Unknown"))
HNSC_combined@meta.data$Cells <- cells

nfeatures <- 1000  # define number of variable features to consider
npcs <- 20  # define number of Principal Components for dimensionality reduction

HNSC_combined <- UpdateSeuratObject(HNSC_combined) |>
    NormalizeData()
HNSC_combined.list <- SplitObject(HNSC_combined, split.by = "Dataset")
HNSC_combined.stacas <- Run.STACAS(HNSC_combined.list, anchor.features = nfeatures, dims = 1:npcs, cell.labels = "Cells")
HNSC_combined.stacas <- RunUMAP(HNSC_combined.stacas, dims = 1:npcs)
saveRDS(HNSC_combined.stacas, "/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_stacas.rds")
```

```{r}
#!/software/r/4.2.0/bin/Rscript
#BSUB -q medium
#BSUB -W 1:00 
#BSUB -n 50 
#BSUB -R "span[hosts=1]"
#BSUB -R "rusage[mem=200GB]"
#BSUB -J Merge
#BSUB -u cristina.condelopez@dkfz-heidelberg.de

library(ggplot2)
library(dplyr)
library(patchwork)
library(viridis)
library(Seurat)
library(scGate)

HNSC_combined.stacas <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_stacas.rds")

models.DB <- scGate::get_scGateDB()
models.list <- models.DB$human$TME_HiRes
HNSC_combined.stacas <- scGate(HNSC_combined.stacas, model = models.list, ncores = 4)

saveRDS(HNSC_combined.stacas, "/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_stacas.rds")
```

```{r}
HNSC_combined <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_stacas_scGate.rds")
HNSC_combined@meta.data <- HNSC_combined@meta.data %>%
  mutate(Cells_Tumor_Integration = if_else(Tumor.y == "Tumor", "Tumor", scGate_multi))
# Update the Cells variable with the desired changes
HNSC_combined@meta.data <- HNSC_combined@meta.data %>%
  mutate(
    Cells = case_when(
      Cells %in% c("Macrophagues", "Macrophages") ~ "Macrophages", # Merge Macrophague variations
      Cells %in% c("Unknown", "Unresolved", NA) ~ "Unknown",    # Merge into "Unknown"
      TRUE ~ Cells                                       # Keep other values unchanged
    )
  )
```

```{r}
DimPlot(HNSC_combined, group.by="Cells", raster = F, label = T)
```
```{r}
umap_plot <- DimPlot(HNSC_combined, group.by = "Cells", raster = FALSE, label = TRUE) +
  labs(title = "Original Labelling") +
  theme_minimal()

ggsave("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Atlas_Images/UMAP_Cells_Updated.pdf", plot = umap_plot, width = 10, height = 6)
```

```{r}
library(Seurat)
library(ggplot2)
library(ggrepel)

# Define custom colors
custom_colors <- c(
  "Unknown" = "gray",  # Assign gray to Unknown
  # Keep other categories with their default Seurat colors
  scales::hue_pal()(length(unique(HNSC_combined$Cells)) - 1) # Generate remaining colors
)

# Create a named vector for the remaining colors
names(custom_colors)[-1] <- setdiff(
  unique(HNSC_combined$Cells), "Unknown"
)

# Plot with custom colors
umap_plot <- DimPlot(
  HNSC_combined, 
  group.by = "Cells", 
  raster = FALSE, 
  label = FALSE
) +
  scale_color_manual(values = custom_colors) +
  theme_minimal()

# Extract UMAP coordinates and metadata for labels
umap_data <- as.data.frame(Embeddings(HNSC_combined, "umap"))
umap_data$Cells <- HNSC_combined@meta.data$Cells

# Calculate cluster centroids for each cell type
centroids <- umap_data %>%
  group_by(Cells) %>%
  summarise(UMAP_1 = mean(UMAP_1), UMAP_2 = mean(UMAP_2), .groups = 'drop')

# Add the labels using geom_text_repel
umap_plot <- umap_plot +
  geom_text_repel(
    data = centroids,
    aes(x = UMAP_1, y = UMAP_2, label = Cells),
    size = 4,                  # Adjust size of labels
    box.padding = 0.5,         # Space around labels
    point.padding = 0.3,       # Distance from point to label
    segment.color = "black",   # Line color for segments
    segment.size = 0.5,        # Thickness of the line
    segment.linetype = "solid" # Line style (e.g., dashed, dotted)
  ) +
  theme_minimal()              # Optional: clean up the theme

ggsave("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Atlas_Images/UMAP_Cells_Labels.pdf", plot = umap_plot, width = 10, height = 6)
```



```{r}
DimPlot(HNSC_combined, group.by="Cells_Tumor_Integration", raster = F, label = T)
```

## Percentages of XX, XY and XO groups

We select the groups of interest: HNSC_combined <- subset(HNSC_combined_groups, subset = (Chr_Dosage != "intermediate"))

```{r}
HNSC_combined_groups <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_groups.rds")
```

And remove the Dataset that has tinkered proportions of cells:

```{r}
HNSC_combined_groups <- subset(HNSC_combined_groups, subset = Dataset != c("Kurten"))
```

```{r}
data <- HNSC_combined_groups@meta.data
```

```{r}
# Load necessary libraries
library(ggplot2)
library(reshape2)

# Create a contingency table
tab <- table(data$Cells, data$Cells_Tumor_Integration)

# Convert table to data frame for plotting
tab_df <- as.data.frame(tab)
colnames(tab_df) <- c("Original", "scGate", "Freq")
```

```{r}
# Plot using ggplot2
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration")
ggplot(tab_df, aes(x = Original, y = scGate, fill = Freq)) +
  geom_tile(aes(width = 1, height = 1), colour = "white") +
  scale_fill_gradient(low = "white", high = "steelblue") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(fill = "Count", x = "Original Label", y = "scGate Relabel")
graph <- paste0("Overlap_cell_labels.pdf")
  ggsave(graph)
```

```{r}
color <-c("Bcell"= "#8dd3c7","CD4T" = "#ffffb3","CD8T" = "#bebada","Endothelial"= "#fb8072","Epithelial"= "#ffed6f","Fibroblast" = "#b3de69" ,"Macrophage"= "#fdb462","Mast" = "#fccde5","Monocyte"= "#d9d9d9","Multi" = "#bc80bd" , "Neutrophils"= "#ccebc5", "NK"= "#6a3d9a" , "panDC"= "#1f78b4" , "PlasmaCell" = "#c51b8a", "Tumor" = "#80b1d3")
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")

metadata <- na.omit(data.frame(Cluster = HNSC_combined_groups$Cells_Tumor_Integration, Group = HNSC_combined_groups$Chr_Dosage, HPV = HNSC_combined_groups$HPV))


  metadata$Category <- str_c(metadata$HPV, "_", metadata$Group)
  split.object <- split(metadata, metadata$Category) 

  plot.list <- list()
  for (i in 1:length(split.object)) {
  library(dplyr)
    plot.list[[i]] <- split.object[[i]] %>%
    group_by(HPV, Group, Cluster) %>%
    dplyr::summarize(n = n()) %>% 
    mutate(pct = round(n/sum(n), digits = 3),
    lbl = scales::percent(pct))
  }
  names(plot.list) <- names(split.object)
  
  grouping <- do.call(rbind.data.frame, plot.list)
  grouping$Group <- factor(grouping$Group, levels = c("XX", "X0", "XY"))
```

```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")
theme_set(theme_minimal())  
  theme_update(axis.text.x = element_text(size = 6))
  ggplot(grouping, aes(x=as.factor(Group), y=pct, fill = as.factor(Cluster))) +
  geom_col(position="fill") +
  scale_fill_manual("Cell Type", values = color) +
  ggtitle(c("Cell Type")) +
  geom_text(aes(label = lbl), 
            size = 1, 
            position = position_fill(vjust = 0.5)) +
  xlab("Sex Chr Dosage") + ylab("Percent") + labs(fill = "Cell Type") +
  facet_grid(. ~ HPV) 
  graph <- paste0("Chr_Dosage", "_relative_number.pdf")
  ggsave(graph)
```
```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")

theme_set(theme_minimal())  
  theme_update(axis.text.x = element_text(size = 6))
  ggplot(grouping, aes(x=as.factor(Group), y=n, fill = as.factor(Cluster))) +
  geom_bar(position="stack", stat = "identity") +
  scale_fill_manual("Cell Type", values = color) +
  ggtitle(c("Cell Type")) +
  #geom_text(aes(label = n), 
            #size = 3, 
            #position = position_fill(vjust = 0.5)) +
  xlab("Sex Chr Dosage") + ylab("Percent") + labs(fill = "Cell Type") +
  facet_grid(. ~ HPV)
  
  graph <- paste0("Chr_Dosage", "_absolute_number.pdf")
  ggsave(graph)
```
```{r}
HNSC_combined_immune <- subset(HNSC_combined_groups, subset = Cells_Tumor %in% c("Bcell","CD4T","CD8T", "Macrophage","Mast","Monocyte","Neutrophils","NK", "panDC" ))
```

```{r}
color <-c("Bcell"= "#8dd3c7","CD4T" = "#ffffb3","CD8T" = "#bebada","Macrophage"= "#b3de69","Mast" = "#fccde5","Monocyte"= "#bc80bd", "Neutrophils"= "#ccebc5", "NK"= "#c51b8a" , "panDC"= "#1f78b4")

setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")
metadata <- na.omit(data.frame(Cluster = HNSC_combined_immune$Cells_Tumor_Integration, Group = HNSC_combined_immune$Chr_Dosage, HPV = HNSC_combined_immune$HPV))


  metadata$Category <- str_c(metadata$HPV, "_", metadata$Group)
  split.object <- split(metadata, metadata$Category) 

  plot.list <- list()
  for (i in 1:length(split.object)) {
  library(dplyr)
    plot.list[[i]] <- split.object[[i]] %>%
    group_by(HPV, Group, Cluster) %>%
    dplyr::summarize(n = n()) %>% 
    mutate(pct = round(n/sum(n), digits = 3),
    lbl = scales::percent(pct))
  }
  names(plot.list) <- names(split.object)
  
  grouping <- do.call(rbind.data.frame, plot.list)
  grouping$Group <- factor(grouping$Group, levels = c("XX", "X0", "XY"))
```

```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")
theme_set(theme_minimal())  
  theme_update(axis.text.x = element_text(size = 6))
  ggplot(grouping, aes(x=as.factor(Group), y=pct, fill = as.factor(Cluster))) +
  geom_col(position="fill") +
  scale_fill_manual("Cell Type", values = color) +
  ggtitle(c("Cell Type")) +
  geom_text(aes(label = lbl), 
            size = 1, 
            position = position_fill(vjust = 0.5)) +
  xlab("Sex Chr Dosage") + ylab("Percent") + labs(fill = "Cell Type") +
  facet_grid(. ~ HPV) 
  graph <- paste0("Chr_Dosage_ImmuneCell", "_relative_number.pdf")
  ggsave(graph)
```
```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")
 theme_set(theme_minimal())  
  theme_update(axis.text.x = element_text(size = 6))
  ggplot(grouping, aes(x=as.factor(Group), y=n, fill = as.factor(Cluster))) +
  geom_bar(position="stack", stat = "identity") +
  scale_fill_manual("Cell Type", values = color) +
  ggtitle(c("Cell Type")) +
  #geom_text(aes(label = n), 
            #size = 3, 
            #position = position_fill(vjust = 0.5)) +
  xlab("Sex Chr Dosage") + ylab("Percent") + labs(fill = "Cell Type") +
  facet_grid(. ~ HPV)
  
  graph <- paste0("Chr_Dosage_ImmuneCell", "_absolute_number.pdf")
  ggsave(graph)
```
```{r}
#!/software/r/4.2.0/bin/Rscript
#BSUB -q medium
#BSUB -W 1:00 
#BSUB -n 50 
#BSUB -R "span[hosts=1]"
#BSUB -R "rusage[mem=200GB]"
#BSUB -J Merge
#BSUB -u cristina.condelopez@dkfz-heidelberg.de

library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
library(ProjecTILs)
library(STACAS)
library(ggplot2)
library(SignatuR)
library(UCell)

setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration")
HNSC_combined_groups <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_groups.rds")
cd8tcell <- subset(HNSC_combined_groups, subset= (scGate_multi == "CD8T"))
options(timeout = max(900, getOption("timeout")))
ref.cd8 <- load.reference.map("CD8T_human_ref_v1.rds")
DefaultAssay(cd8tcell) <- "RNA"
cd8tcell <- ProjecTILs.classifier(query = cd8tcell, ref = ref.cd8, filter.cells = F)
cd8tcell$CD8Type <- cd8tcell$functional.cluster
saveRDS(cd8tcell, "/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/CD8T_Chr_Dosage.rds")
```

```{r}
cd8tcell <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/CD8T_Chr_Dosage.rds")
cd8tcell <- subset(cd8tcell, subset = Dataset != c("Kurten"))
```


```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")

color <-c("CD8.CM"= "#8dd3c7","CD8.EM"  = "#ffffb3","CD8.MAIT" = "#bebada","CD8.NaiveLike"= "#fccde5","CD8.TEMRA" = "#80b1d3","CD8.TEX" = "#fdb462","CD8.TPEX"= "#b3de69")

metadata <- na.omit(data.frame(Cluster = cd8tcell@meta.data$CD8Type, Group = cd8tcell@meta.data$Chr_Dosage, HPV = cd8tcell@meta.data$HPV))


  metadata$Category <- str_c(metadata$HPV, "_", metadata$Group)
  split.object <- split(metadata, metadata$Category) 

  plot.list <- list()
  for (i in 1:length(split.object)) {
  library(dplyr)
    plot.list[[i]] <- split.object[[i]] %>%
    group_by(HPV, Group, Cluster) %>%
    dplyr::summarize(n = n()) %>% 
    mutate(pct = round(n/sum(n), digits = 3),
    lbl = scales::percent(pct))
  }
  names(plot.list) <- names(split.object)
  
  grouping <- do.call(rbind.data.frame, plot.list)
  grouping$Group <- factor(grouping$Group, levels = c("XX", "X0", "XY"))
```

```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")

  theme_set(theme_minimal())  
  theme_update(axis.text.x = element_text(size = 6))
  ggplot(grouping, aes(x=as.factor(Group), y=pct, fill = as.factor(Cluster))) +
  geom_col(position="fill") +
  scale_fill_manual("Cell Type", values = color) +
  ggtitle(c("CD8T Cell Type")) +
  geom_text(aes(label = lbl), 
            size = 1, 
            position = position_fill(vjust = 0.5)) +
  xlab("Sex Chr Dosage") + ylab("Percent") + labs(fill = "CD8T Cell Type") +
  facet_grid(. ~ HPV) 
  graph <- paste0("Chr_Dosage_CD8T_CellType", "_relative_number.pdf")
  ggsave(graph)
```

```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")

  theme_set(theme_minimal())  
  theme_update(axis.text.x = element_text(size = 6))
  ggplot(grouping, aes(x=as.factor(Group), y=n, fill = as.factor(Cluster))) +
  geom_bar(position="stack", stat = "identity") +
  scale_fill_manual("Cell Type", values = color) +
  ggtitle(c("CD8T Cell Type")) +
  #geom_text(aes(label = n), 
            #size = 3, 
            #position = position_fill(vjust = 0.5)) +
  xlab("Sex Chr Dosage") + ylab("Percent") + labs(fill = "CD8T Cell Type") +
  facet_grid(.~ HPV) 
  graph <- paste0("Chr_Dosage_CD8T_CellType", "_absolute_number.pdf")
  ggsave(graph)
```

```{r}
#!/software/r/4.2.0/bin/Rscript
#BSUB -q medium
#BSUB -W 1:00 
#BSUB -n 50 
#BSUB -R "span[hosts=1]"
#BSUB -R "rusage[mem=200GB]"
#BSUB -J Merge
#BSUB -u cristina.condelopez@dkfz-heidelberg.de

library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
library(ProjecTILs)
library(STACAS)
library(ggplot2)
library(SignatuR)
library(UCell)

setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration")
HNSC_combined_groups <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_groups.rds")
cd4tcell <- subset(HNSC_combined_groups, subset= (scGate_multi == "CD4T"))
options(timeout = max(900, getOption("timeout")))
ref.cd4 <- load.reference.map("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/CD4T_human_ref_v1.rds")
DefaultAssay(cd4tcell) <- "RNA"
cd4tcell <- ProjecTILs.classifier(query = cd4tcell, ref = ref.cd4, filter.cells = F)
cd4tcell$CD4Type <- cd4tcell$functional.cluster
saveRDS(cd4tcell, "/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/CD4T_Chr_Dosage.rds")
```

```{r}
cd4tcell <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/CD4T_Chr_Dosage.rds")
cd4tcell <- subset(cd4tcell, subset = Dataset != c("Kurten"))
```

```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")

color <-c("CD4.CTL_EOMES"= "#8dd3c7","CD4.CTL_Exh"  = "#ffffb3","CD4.CTL_GNLY" = "#bebada","CD4.NaiveLike"= "#fccde5","CD4.Tfh" = "#80b1d3","CD4.Th17"  = "#fdb462","CD4.Treg" = "#b3de69")

metadata <- na.omit(data.frame(Cluster = cd4tcell@meta.data$CD4Type, Group = cd4tcell@meta.data$Chr_Dosage, HPV = cd4tcell@meta.data$HPV))


  metadata$Category <- str_c(metadata$HPV, "_", metadata$Group)
  split.object <- split(metadata, metadata$Category) 

  plot.list <- list()
  for (i in 1:length(split.object)) {
  library(dplyr)
    plot.list[[i]] <- split.object[[i]] %>%
    group_by(HPV, Group, Cluster) %>%
    dplyr::summarize(n = n()) %>% 
    mutate(pct = round(n/sum(n), digits = 3),
    lbl = scales::percent(pct))
  }
  names(plot.list) <- names(split.object)
  
  grouping <- do.call(rbind.data.frame, plot.list)
  grouping$Group <- factor(grouping$Group, levels = c("XX", "X0", "XY"))
```

```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")

  theme_set(theme_minimal())  
  theme_update(axis.text.x = element_text(size = 6))
  ggplot(grouping, aes(x=as.factor(Group), y=pct, fill = as.factor(Cluster))) +
  geom_col(position="fill") +
  scale_fill_manual("Cell Type", values = color) +
  ggtitle(c("CD4T Cell Type")) +
  geom_text(aes(label = lbl), 
            size = 1, 
            position = position_fill(vjust = 0.5)) +
  xlab("Sex Chr Dosage") + ylab("Percent") + labs(fill = "CD4T Cell Type") +
  facet_grid(. ~ HPV) 
  graph <- paste0("Chr_Dosage_CD4T_CellType", "_relative_number.pdf")
  ggsave(graph)
```

```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")

  theme_set(theme_minimal())  
  theme_update(axis.text.x = element_text(size = 6))
  ggplot(grouping, aes(x=as.factor(Group), y=n, fill = as.factor(Cluster))) +
  geom_bar(position="stack", stat = "identity") +
  scale_fill_manual("Cell Type", values = color) +
  ggtitle(c("CD4T Cell Type")) +
  #geom_text(aes(label = n), 
            #size = 3, 
            #position = position_fill(vjust = 0.5)) +
  xlab("Sex Chr Dosage") + ylab("Cell Number") + labs(fill = "CD4T Cell Type") +
  facet_grid(. ~ HPV) 
  graph <- paste0("Chr_Dosage_CD4T_CellType", "_absolute_number.pdf")
  ggsave(graph)
```

```{r}
#!/software/r/4.2.0/bin/Rscript
#BSUB -q medium
#BSUB -W 1:00 
#BSUB -n 50 
#BSUB -R "span[hosts=1]"
#BSUB -R "rusage[mem=200GB]"
#BSUB -J Merge
#BSUB -u cristina.condelopez@dkfz-heidelberg.de

library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
library(ProjecTILs)
library(STACAS)
library(ggplot2)
library(SignatuR)
library(UCell)

setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration")
HNSC_combined_groups <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_groups.rds")
dccell <- subset(HNSC_combined_groups, subset= (scGate_multi == "panDC"))
options(timeout = max(900, getOption("timeout")))
ref.dc <- load.reference.map("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/DC_human_ref_v1.rds")
DefaultAssay(dccell) <- "RNA"
dccell <- ProjecTILs.classifier(query = dccell, ref = ref.dc, filter.cells = F)
dccell$DCType <- dccell$functional.cluster
saveRDS(dccell, "/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/DC_Chr_Dosage.rds")
```

```{r}
dccell <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/DC_Chr_Dosage.rds")
dccell <- subset(dccell, subset = Dataset != c("Kurten"))
```

```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")                                                                                      
color <-c("AS-DC"= "#8dd3c7","cDC1"  = "#ffffb3","cDC2_CD1A" = "#bebada","cDC2_CLEC10A"= "#fccde5","DC3"  = "#80b1d3","MonoDC"  = "#fdb462","pDC"  = "#b3de69")

metadata <- na.omit(data.frame(Cluster = dccell@meta.data$DCType, Group = dccell@meta.data$Chr_Dosage, HPV = dccell@meta.data$HPV))


  metadata$Category <- str_c(metadata$HPV, "_", metadata$Group)
  split.object <- split(metadata, metadata$Category) 

  plot.list <- list()
  for (i in 1:length(split.object)) {
  library(dplyr)
    plot.list[[i]] <- split.object[[i]] %>%
    group_by(HPV, Group, Cluster) %>%
    dplyr::summarize(n = n()) %>% 
    mutate(pct = round(n/sum(n), digits = 3),
    lbl = scales::percent(pct))
  }
  names(plot.list) <- names(split.object)
  
  grouping <- do.call(rbind.data.frame, plot.list)
  grouping$Group <- factor(grouping$Group, levels = c("XX", "X0", "XY"))
```

```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")
 theme_set(theme_minimal())  
  theme_update(axis.text.x = element_text(size = 6))
  ggplot(grouping, aes(x=as.factor(Group), y=pct, fill = as.factor(Cluster))) +
  geom_col(position="fill") +
  scale_fill_manual("Cell Type", values = color) +
  ggtitle(c("DC Cell Type")) +
  geom_text(aes(label = lbl), 
            size = 1, 
            position = position_fill(vjust = 0.5)) +
  xlab("Sex Chr Dosage") + ylab("Percent") + labs(fill = "DC Cell Type") +
  facet_grid(. ~ HPV) 
  graph <- paste0("Chr_Dosage_DC_CellType", "_relative_number.pdf")
  ggsave(graph)
```

```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")
  theme_set(theme_minimal())  
  theme_update(axis.text.x = element_text(size = 6))
  ggplot(grouping, aes(x=as.factor(Group), y=n, fill = as.factor(Cluster))) +
  geom_bar(position="stack", stat = "identity") +
  scale_fill_manual("Cell Type", values = color) +
  ggtitle(c("DC Cell Type")) +
  #geom_text(aes(label = n), 
            #size = 3, 
            #position = position_fill(vjust = 0.5)) +
  xlab("Sex Chr Dosage") + ylab("Cell Number") + labs(fill = "DC Cell Type") +
  facet_grid(. ~ HPV) 
  graph <- paste0("Chr_Dosage_DC_CellType", "_absolute_number.pdf")
  ggsave(graph)
```

```{r}
#!/software/r/4.2.0/bin/Rscript
#BSUB -q medium
#BSUB -W 1:00 
#BSUB -n 50 
#BSUB -R "span[hosts=1]"
#BSUB -R "rusage[mem=200GB]"
#BSUB -J Merge
#BSUB -u cristina.condelopez@dkfz-heidelberg.de

library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
library(ProjecTILs)
library(STACAS)
library(ggplot2)
library(SignatuR)
library(UCell)

setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration")
HNSC_combined_groups <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_groups.rds")
fibroblast <- subset(HNSC_combined_groups, subset= (scGate_multi == "Fibroblast"))
options(timeout = max(900, getOption("timeout")))
ref.fibroblast <- load.reference.map("/omics/odcf/analysis/OE0509_projects/hnscc/Gender_Analysis/Fibroblast/ref.fibroblast.rds")
DefaultAssay(fibroblast) <- "RNA"
fibroblast <- ProjecTILs.classifier(query = fibroblast, ref = ref.fibroblast, filter.cells = F)
saveRDS(fibroblast, "/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Fibroblast_Chr_Dosage.rds")
```

```{r}
fibroblast <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Fibroblast_Chr_Dosage.rds")
fibroblast$Fibroblast_Type <- fibroblast$functional.cluster
fibroblast@meta.data <- fibroblast@meta.data %>%
  mutate(Fibroblast_Type = if_else(Fibroblast_Type %in% c("perycite", "Perycite"), "Perycite", Fibroblast_Type))
fibroblast <- subset(fibroblast, subset = Dataset != c("Kurten"))
```

```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")                                                                                      
color <-c("mCAF" = "#8dd3c7", "tpCAF" = "#ffffb3", "IDO_CAF" = "#fb8072", "iCAF" = "#b3de69", "apCAF" = "#fdb462", "Pericyte" = "#fccde5",  "rCAF+apCAF"= "#6a3d9a", "hsp_tpCAF" = "#1f78b4",  "vCAF" = "#bc80bd",  "other" = "#c51b8a","rCAF" = "#ccebc5", "dCAF"= "#ffed6f")

metadata <- na.omit(data.frame(Cluster = fibroblast@meta.data$Fibroblast_Type, Group = fibroblast@meta.data$Chr_Dosage, HPV = fibroblast@meta.data$HPV))


  metadata$Category <- str_c(metadata$HPV, "_", metadata$Group)
  split.object <- split(metadata, metadata$Category) 

  plot.list <- list()
  for (i in 1:length(split.object)) {
  library(dplyr)
    plot.list[[i]] <- split.object[[i]] %>%
    group_by(HPV, Group, Cluster) %>%
    dplyr::summarize(n = n()) %>% 
    mutate(pct = round(n/sum(n), digits = 3),
    lbl = scales::percent(pct))
  }
  names(plot.list) <- names(split.object)
  
  grouping <- do.call(rbind.data.frame, plot.list)
  grouping$Group <- factor(grouping$Group, levels = c("XX", "X0", "XY"))
```

```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")
 theme_set(theme_minimal())  
  theme_update(axis.text.x = element_text(size = 6))
  ggplot(grouping, aes(x=as.factor(Group), y=pct, fill = as.factor(Cluster))) +
  geom_col(position="fill") +
  scale_fill_manual("Cell Type", values = color) +
  ggtitle(c("Fibroblast Cell Type")) +
  geom_text(aes(label = lbl), 
            size = 1, 
            position = position_fill(vjust = 0.5)) +
  xlab("Sex Chr Dosage") + ylab("Percent") + labs(fill = "Cell Type") +
  facet_grid(. ~ HPV) 
  graph <- paste0("Chr_Dosage_Fibroblast_CellType", "_relative_number.pdf")
  ggsave(graph)
```

```{r}
setwd("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Percentage_Graphs_XX-XY-X0")
  theme_set(theme_minimal())  
  theme_update(axis.text.x = element_text(size = 6))
  ggplot(grouping, aes(x=as.factor(Group), y=n, fill = as.factor(Cluster))) +
  geom_bar(position="stack", stat = "identity") +
  scale_fill_manual("Cell Type", values = color) +
  ggtitle(c("Fibroblast Cell Type")) +
  #geom_text(aes(label = n), 
            #size = 3, 
            #position = position_fill(vjust = 0.5)) +
  xlab("Sex Chr Dosage") + ylab("Cell Number") + labs(fill = "DC Cell Type") +
  facet_grid(. ~ HPV) 
  graph <- paste0("Chr_Dosage_Fibroblast_CellType", "_absolute_number.pdf")
  ggsave(graph)
```

```{r}
HNSC_combined_groups <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_groups.rds")
fibroblast <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/Fibroblast_Chr_Dosage.rds")
fibroblast$Fibroblast_Type <- fibroblast$functional.cluster
fibroblast@meta.data <- fibroblast@meta.data %>%
  mutate(Fibroblast_Type = if_else(Fibroblast_Type %in% c("perycite", "Perycite"), "Perycite", Fibroblast_Type))

fibroblast_type <- data.frame(Cell = fibroblast$Cell_Labels, Fibroblast = fibroblast$Fibroblast_Type)

HNSC_combined_groups@meta.data <- HNSC_combined_groups@meta.data %>%
  left_join(fibroblast_type, by = c("Cell_Labels" = "Cell"))

HNSC_combined_groups@meta.data <- HNSC_combined_groups@meta.data %>%
  mutate(Cells_Fibroblast = coalesce(Fibroblast.y, Cells_Tumor_Integration))

saveRDS(HNSC_combined_groups, "/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_fibroblast.rds")
```

```{r}
HNSC_combined_Y <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_Y.rds")
male <- subset(HNSC_combined_Y, subset = (Sex == c("Male")))
VlnPlot(male, features = c("pct_chrY"), group.by = c("Cells_Tumor"), split.by = c("Patient"), raster = F)
```

```{r}
XO <- subset(HNSC_combined_Y, subset = (Chr_Dosage == c("X0")))
VlnPlot(XO, features = c("pct_chrY"), group.by = c("Cells_Tumor"), split.by = c("Patient"))
```

```{r}
XY <- subset(HNSC_combined_Y, subset = (Chr_Dosage == c("XY")))
VlnPlot(XY, features = c("pct_chrY"), group.by = c("Cells_Tumor"), split.by = c("Patient"))
```


```{r}
metadata <- HNSC_combined_Y@meta.data
write.csv(metadata, "HNSC_combined_metadata.csv")
```

```{r}
HNSC_combined_Y <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_Y.rds")
male <- subset(HNSC_combined_Y, subset = (Sex == c("Male")))
VlnPlot(male, features = c("pct_chrY"), group.by = c("Cells_Tumor"), split.by = c("Patient"), raster = F)
```

```{r}
XO <- subset(HNSC_combined_Y, subset = (Chr_Dosage == c("X0")))
VlnPlot(XO, features = c("pct_chrY"), group.by = c("Cells_Tumor"), split.by = c("Patient"))
```

```{r}
XY <- subset(HNSC_combined_Y, subset = (Chr_Dosage == c("XY")))
VlnPlot(XY, features = c("pct_chrY"), group.by = c("Cells_Tumor"), split.by = c("Patient"))
metadata_XY <- XY@meta.data
summary_data <- metadata_XY %>%
  group_by(Chr_Dosage, Cells_Tumor) 
```


```{r}

metadata_XY <- subset(metadata, subset = (Chr_Dosage == c("XY")))
summary_data <- metadata_XY %>%
  group_by(Cells_Tumor) %>%
  summarise(mean_pct_Y = mean(pct_chrY, na.rm = TRUE))
```

```{r}
metadata <- HNSC_combined_Y@meta.data
metadata <- data.frame(Chr_Dosage = metadata$Chr_Dosage, pct_y = metadata$pct_chrY, Cell_Type = metadata$Cells_Tumor, HPV = metadata$HPV)
metadata <- subset(metadata, subset = (Chr_Dosage != c("intermediate")))
summary_data <- metadata %>%
  group_by(Chr_Dosage, Cell_Type) %>%
  dplyr::summarize(mean_pct_Y = mean(pct_y, na.rm = TRUE))
```

```{r}
library(dplyr)

# Filter data for only XY and X0 groups
filtered_data <- metadata %>%
  filter(Chr_Dosage %in% c("XY", "X0"))

# Perform pairwise t-tests for each Cell_Type
t_test_results <- filtered_data %>%
  group_by(Cell_Type) %>%
  dplyr::summarize(p_value = t.test(pct_y[Chr_Dosage == "XY"], pct_y[Chr_Dosage == "X0"], .groups = 'drop'))  # Drop the grouping

# Adjust p-values for multiple testing if necessary, e.g., using Bonferroni correction
t_test_results$p_adjusted <- p.adjust(t_test_results$p_value, method = "bonferroni")
```


```{r}
ggplot(metadata, aes(x = Cell_Type, y = pct_Y, fill = Chr_Dosage)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  labs(title = "Mean pct_Y by Cell Type and Chromosome Dosage",
       x = "Cell Type",
       y = "Mean pct_Y") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set1")  # This uses color palettes suitable for categorical data
```

```{r}
ggplot(metadata, aes(x = Cell_Type, y = pct_y, fill = Chr_Dosage)) +
  geom_violin(trim = FALSE, position = position_dodge(width = 0.8)) + # trim=FALSE shows the full range of data
  labs(title = "Distribution of pct_Y Values by Cell Type and Chr_Dosage",
       x = "Cell Type",
       y = "pct_Y") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set1") +
  geom_jitter(position = position_dodge(width = 0.9), width = 0.2, size = 1.5, alpha = 0.7) +  # Adds jittered points to show individual observations
  scale_y_continuous(limits = c(0, 0.010)) +  # Sets y-axis limits
  scale_color_brewer(palette = "Set1") 
```

```{r}
ggplot(metadata, aes(x = Cell_Type, y = pct_y, fill = Chr_Dosage)) +
  geom_boxplot(width=0.8) + theme_minimal()
```

```{r}
library(ggplot2)
library(ggsignif)
# Subset the data for statistical test
filtered_data <- metadata %>%
  filter(Chr_Dosage %in% c("XY", "X0"))
ggplot(filtered_data, aes(x = Cell_Type, y = pct_y, fill = Chr_Dosage)) +
  labs(title = "Y Chromosome Expression by Cell Type",
       x = "Cell Type",
       y = "Percentage of Y Chromosome Expression") +
  geom_boxplot(width = 0.7) +
  theme_minimal() + 
  stat_compare_means(label = "p.signif", method = "t.test") +
  facet_grid(. ~ HPV)
```


```{r}
Fibroblast_Chr_Dosage <- NormalizeData(Fibroblast_Chr_Dosage)
Fibroblast_Chr_Dosage <- FindVariableFeatures(Fibroblast_Chr_Dosage)
Fibroblast_Chr_Dosage <- ScaleData(Fibroblast_Chr_Dosage)
Fibroblast_Chr_Dosage <- RunPCA(Fibroblast_Chr_Dosage)
Fibroblast_Chr_Dosage <- FindNeighbors(Fibroblast_Chr_Dosage, dims = 1:30, reduction = "pca")
Fibroblast_Chr_Dosage <- FindClusters(Fibroblast_Chr_Dosage, resolution = 2, cluster.name = "unintegrated_clusters")
Fibroblast_Chr_Dosage <- RunUMAP(Fibroblast_Chr_Dosage, dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")
```

```{r}
class <- subset(Fibroblast_Chr_Dosage, subset = functional.cluster %in% c("mCAF","iCAF"))
```


```{r}
Idents(class) <- class$functional.cluster
FeaturePlot(object = class,
features = c("PTGS2", "AR"),
reduction = "umap", pt.size = 0.8, blend = TRUE, blend.threshold = 0.25, order = T, label = T, split.by = "Chr_Dosage")
```

```{r}
VlnPlot(Fibroblast_Chr_Dosage, features = c("PTGS2"), group.by = c("functional.cluster"), split.by = c("Chr_Dosage"))
```

```{r}
VlnPlot(Fibroblast_Chr_Dosage, features = c("ACTA2"), group.by = c("functional.cluster"), split.by = c("Chr_Dosage"))
```

## Statistical Analysis of Cell Proportions

```{r}
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggpubr)

# Assuming data needs to be processed to calculate proportions
data_summary <- HNSCC_atlas_metadata %>%
  group_by(Patient, Sex, HPV, Cells_Tumor_Integration) %>%
  summarise(Count = n(), .groups = 'drop') %>%
  group_by(Patient, Sex, HPV) %>%
  mutate(Total = sum(Count), Proportion = Count / Total) %>%
  ungroup()

# Create a long format data for plotting
data_long <- data_summary %>%
  select(Patient, Sex, HPV, Cells_Tumor_Integration, Proportion) %>%
  pivot_longer(cols = Proportion, names_to = "Variable", values_to = "Value")

# Split the data by HPV status
data_hpv_plus <- filter(data_long, HPV == "HPV+")
data_hpv_minus <- filter(data_long, HPV == "HPV-")

ggplot(data_long, aes(x = Cells_Tumor_Integration, y = Value, fill = Sex)) +
    geom_boxplot(outlier.shape = NA, position = position_dodge(0.8)) +
    #stat_boxplot(geom ='errorbar', width=0.8, position = position_dodge(0.8)) + # Add error bars
    #facet_wrap(~Cell_Type, scales = "free_y") +
    stat_compare_means(method = "wilcox.test", label = "p.signif") +
    labs(title = "HPV -", x = "Cell Type", y = "Proportion") +
    facet_grid(. ~ HPV) +
    theme_minimal() +
    theme(legend.position = "top",
          plot.title = element_text(size = 14, face = "bold"),
          axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
          strip.background = element_blank())
```

```{r}
patient <- subset(data_long, subset = Patient == "BHN17")
sum(patient$Value)

```
```{r}
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggpubr)

# Assuming data needs to be processed to calculate proportions
data_summary <- HNSCC_atlas_metadata %>%
  group_by(Patient, Sex, HPV, Cells_Tumor_Integration) %>%
  summarise(Count = n(), .groups = 'drop') %>%
  group_by(Patient, Sex, HPV) %>%
  mutate(Total = sum(Count), Proportion = Count / Total) %>%
  ungroup()

data_summary <- data_summary %>%
  mutate(Log_Proportion = log10(Proportion))

# Create a long format data for plotting
data_long <- data_summary %>%
  select(Patient, Sex, HPV, Cells_Tumor_Integration, Log_Proportion) %>%
  pivot_longer(cols = Log_Proportion, names_to = "Variable", values_to = "Value")

# Split the data by HPV status
data_hpv_plus <- filter(data_long, HPV == "HPV+")
data_hpv_minus <- filter(data_long, HPV == "HPV-")

ggplot(data_long, aes(x = Cells_Tumor_Integration, y = Value, fill = Sex)) +
    geom_boxplot(outlier.shape = NA, position = position_dodge(0.8)) +
    #stat_boxplot(geom ='errorbar', width=0.8, position = position_dodge(0.8)) + # Add error bars
    #facet_wrap(~Cell_Type, scales = "free_y") +
    stat_compare_means(method = "wilcox.test", label = "p.format") +
    labs(title = "HPV -", x = "Cell Type", y = "Log Transformed Proportion") +
    facet_grid(. ~ HPV) +
    theme_minimal() +
    theme(legend.position = "top",
          plot.title = element_text(size = 14, face = "bold"),
          axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
          strip.background = element_blank())
```

```{r}
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggpubr)

HNSCC_atlas_metadata <- subset(HNSCC_atlas_metadata, subset = Dataset != c("Kurten"))

# Assuming data needs to be processed to calculate proportions
data_summary <- HNSCC_atlas_metadata %>%
  group_by(Patient, Sex, HPV, Cells_Tumor_Integration) %>%
  summarise(Count = n(), .groups = 'drop') %>%
  group_by(Patient, Sex, HPV) %>%
  mutate(Total = sum(Count), Proportion = Count / Total) %>%
  ungroup()

#data_summary <- data_summary %>%
  #mutate(Log_Proportion = log10(Proportion))

# Create a long format data for plotting
data_long <- data_summary %>%
  select(Patient, Sex, HPV, Cells_Tumor_Integration, Proportion) %>%
  pivot_longer(cols = Proportion, names_to = "Variable", values_to = "Value")

# Split the data by HPV status
data_hpv_plus <- filter(data_long, HPV == "HPV+")
data_hpv_minus <- filter(data_long, HPV == "HPV-")

ggplot(data_long, aes(x = Cells_Tumor_Integration, y = Value, fill = Sex)) +
    geom_boxplot(outlier.shape = NA, position = position_dodge(0.8)) +
    #stat_boxplot(geom ='errorbar', width=0.8, position = position_dodge(0.8)) + # Add error bars
    #facet_wrap(~Cell_Type, scales = "free_y") +
    stat_compare_means(method = "wilcox.test", label = "p.format") +
    labs(x = "Cell Type", y = "Cell Proportion") +
    facet_grid(. ~ HPV) +
    theme_minimal() +
    theme(legend.position = "top",
          plot.title = element_text(size = 14, face = "bold"),
          axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
          strip.background = element_blank())
```

```{r}
CD8 <- subset(data_long, subset = Cells_Tumor_Integration =="CD8T")
ggplot(CD8, aes(x = Cells_Tumor_Integration, y = Value, fill = Sex)) +
    geom_boxplot(outlier.shape = NA, position = position_dodge(0.8)) +
    #stat_boxplot(geom ='errorbar', width=0.8, position = position_dodge(0.8)) + # Add error bars
    #facet_wrap(~Cell_Type, scales = "free_y") +
    stat_compare_means(method = "wilcox.test", label = "p.format") +
    labs(title = "HPV -", x = "Cell Type", y = "Log Transformed Proportion") +
    facet_grid(. ~ HPV) +
    theme_minimal() +
    theme(legend.position = "top",
          plot.title = element_text(size = 14, face = "bold"),
          axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
          strip.background = element_blank())
```

```{r}
library(ggplot2)
library(dplyr)
library(gridExtra)

# Unique cell types for looping
cell_types <- unique(data_long$Cells_Tumor_Integration)

# List to store plots
plots_list <- list()

# Loop through each cell type and create a plot
for (cell in cell_types) {
  CD8 <- subset(data_long, Cells_Tumor_Integration == cell)
  p <- ggplot(CD8, aes(x = Cells_Tumor_Integration, y = Value, fill = Sex)) +
    geom_boxplot(outlier.shape = NA, position = position_dodge(0.8)) +
    stat_compare_means(method = "wilcox.test", label = "p.format") +
    labs(title = paste("HPV -", cell), x = "Cell Type", y = "Log Transformed Proportion") +
    facet_grid(. ~ HPV) +
    theme_minimal() +
    theme(legend.position = "top",
          plot.title = element_text(size = 14, face = "bold"),
          axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
          strip.background = element_blank())
  plots_list[[cell]] <- p
}

# Check the length of the list to ensure all plots are stored
length(plots_list)
```
```{r}
plots_list$NK
```

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)

# Calculate proportions normalized by total cells per patient

data_summary <- HNSCC_atlas_metadata %>%
  group_by(Patient, HPV, Sex, Cells_Tumor_Integration) %>%
  summarise(Count = n(), .groups = 'drop') %>%
  group_by(Patient, HPV, Sex) %>%
  mutate(Total_Cells = sum(Count)) %>%
  ungroup() %>%
  mutate(Proportion = Count / Total_Cells)

# Simulate counts for proportion test by assuming a large base number
data_summary <- data_summary %>%
  mutate(Simulated_Count = round(Proportion * 10000))  

# Aggregate simulated counts for each cell type, sex, and HPV status
agg_data <- data_summary %>%
  group_by(HPV, Sex, Cells_Tumor_Integration) %>%
  summarise(Total_Simulated_Count = round(mean(Simulated_Count)), .groups = 'drop')

# Pivot data for prop.test
pivot_data <- agg_data %>%
  pivot_wider(names_from = Sex, values_from = Total_Simulated_Count, values_fill = list(Total_Simulated_Count = 0))

HPVpos <- subset(pivot_data, subset = HPV == "HPV+")
HPVpos <- as.matrix(HPVpos[,3:4]) 
HPVneg <- subset(pivot_data, subset = HPV == "HPV-")
HPVneg <- as.matrix(HPVneg[,3:4]) 

# Perform prop.test
prop.test(HPVpos)
prop.test(HPVneg)


# Load necessary library
library(dplyr)
library(purrr)

# Apply the proportion test to each row
HPVneg <- as.data.frame(HPVneg)
results <- HPVneg %>%
  mutate(
    prop_test = map2(Female, Male, ~prop.test(c(.x, .y), c(.x + .y, .x + .y), correct = FALSE)),
    p_value = map_dbl(prop_test, ~.x$p.value)
  )

# Adjust for multiple comparisons using Bonferroni correction
results$p_adjusted <- p.adjust(results$p_value, method = "bonferroni")

# Print the results
print(results)
```


```{r}
results$Cell_Type <- subset(pivot_data, subset = HPV == "HPV-")$Cells_Tumor_Integration
```

```{r}
library(ggplot2)

long_results <- tidyr::pivot_longer(results, cols = c("Female", "Male"), names_to = "Sex", values_to = "Count")

ggplot(long_results, aes(x = Cell_Type, y = Count, fill = Sex)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(data = subset(long_results, Sex == "Male"),
            aes(label = ifelse(p_adjusted < 0.05, sprintf("p=%.2e", p_adjusted), "")),
            position = position_stack(vjust = 1.05), 
            size = 3, color = "black") +
  scale_fill_manual(values = c("Female" = "#FF9999", "Male" = "#9999FF")) +
  labs(x = "Cell Type", y = "Count", title = "HPV-") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
```

```{r}
# Apply the proportion test to each row
HPVpos <- as.data.frame(HPVpos)
results <- HPVpos %>%
  mutate(
    prop_test = map2(Female, Male, ~prop.test(c(.x, .y), c(.x + .y, .x + .y), correct = FALSE)),
    p_value = map_dbl(prop_test, ~.x$p.value)
  )

# Adjust for multiple comparisons using Bonferroni correction
results$p_adjusted <- p.adjust(results$p_value, method = "bonferroni")

results$Cell_Type <- subset(pivot_data, subset = HPV == "HPV+")$Cells_Tumor_Integration

library(ggplot2)

long_results <- tidyr::pivot_longer(results, cols = c("Female", "Male"), names_to = "Sex", values_to = "Count")

ggplot(long_results, aes(x = Cell_Type, y = Count, fill = Sex)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(data = subset(long_results, Sex == "Male"),
            aes(label = ifelse(p_adjusted < 0.05, sprintf("p=%.2e", p_adjusted), "")),
            position = position_stack(vjust = 1.05), 
            size = 3, color = "black") +
  scale_fill_manual(values = c("Female" = "#FF9999", "Male" = "#9999FF")) +
  labs(x = "Cell Type", y = "Count", title = "HPV+") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))

```

```{r}
HNSC_combined_Y <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_Y.rds")
metadata <- HNSC_combined_Y@meta.data
```

```{r}
library(dplyr)


metadata <- metadata %>%
  mutate(Cell_Dosage = case_when(
    pct_chrY == 0 & Sex == "Male" ~ "X0",
    pct_chrY > 0 & Sex == "Male" ~ "XY",
    Sex == "Female" ~ "XX",
    TRUE ~ NA_character_  # Handles any other cases, can be omitted if all cases are covered
  ))
```

```{r}
percentage_data <- metadata %>%
  group_by(Cells_Tumor, Cell_Dosage) %>%  # Ensure correct grouping
  summarise(Count = n(), .groups = "drop") %>%  # Count per group
  group_by(Cells_Tumor) %>%  # Regroup by Cells_Tumor to calculate totals per Cell_Type
  mutate(Total = sum(Count, na.rm = TRUE)) %>%  # Total per Cells_Tumor
  mutate(Percentage = (Count / Total) * 100)  # Percentage calculation
```

```{r}
library(ggplot2)
ggplot(percentage_data, aes(x = Cells_Tumor, y = Percentage, fill = Cell_Dosage)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Percentage of Cell Dosage per Cell Type",
       x = "Cell Type",
       y = "Percentage (%)",
       fill = "Cell Dosage") +
  theme_minimal()
```

```{r}
library(dplyr)

metadata <- subset(metadata, subset = Sex == "Male")

# Step 1: Calculate the count of "X0" cells per patient per cell type
x0_data <- metadata %>%
  filter(Cell_Dosage == "X0") %>%
  group_by(Patient, Cells_Tumor) %>%
  summarise(X0_Count = n(), .groups = "drop")

# Step 2: Calculate the total cells per patient per cell type
total_data <- metadata %>%
  group_by(Patient, Cells_Tumor) %>%
  summarise(Total_Count = n(), .groups = "drop")

# Step 3: Merge X0 counts with total counts and calculate the percentage
percentage_data <- total_data %>%
  left_join(x0_data, by = c("Patient", "Cells_Tumor")) %>%
  mutate(X0_Count = ifelse(is.na(X0_Count), 0, X0_Count),
         Percentage_X0 = (X0_Count / Total_Count) * 100)

# Step 4: Calculate the mean percentage of X0 cells across all patients for each cell type
mean_percentage_data <- percentage_data %>%
  group_by(Cells_Tumor) %>%
  summarise(Mean_Percentage_X0 = mean(Percentage_X0, na.rm = TRUE),
            .groups = "drop")
```

```{r}
plot <- ggplot(mean_percentage_data, aes(x = Cells_Tumor, y = Mean_Percentage_X0, fill = Cells_Tumor)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.7) +
  labs(title = expression("Mean Percentage of X" * "\u2205" * " Cells per Cell Type"),
       x = "Cell Type",
       y = expression("Mean Percentage of X" * "\u2205" * " Cells per Cell Type"),
       fill = "Cell Type") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Display the plot
print(plot)

# Save the plot as a PDF
ggsave("X0_cell_type.pdf", plot = plot, width = 10, height = 6, family = "DejaVu Sans")
```
```{r}
HNSC_fibroblast <- subset(HNSC_fibroblast, subset = Cells_Fibroblast %in% c("mCAF","tpCAF","IDO_CAF","iCAF","apCAF","Pericyte","rCAF+apCAF","hsp_tpCAF","vCAF","rCAF","pericyte","dCAF"))
```

```{r}
library(Seurat)
VlnPlot(HNSC_fibroblast, features = c("TGFBI", "WNT3A", "HGF", "MFAP5", "IL6"), group.by = "Cells_Fibroblast")
```

```{r}
# Summarize the number of cells per tumor cell type
cell_count_data <- metadata %>%
  group_by(Cells_Tumor) %>%  # Group by cell type
  summarise(Cell_Count = n(), .groups = "drop")  # Count the number of cells per group
```

```{r}
# Plotting the number of cells per tumor cell type
ggplot(cell_count_data, aes(x = Cells_Tumor, y = Cell_Count)) +
  geom_bar(stat = "identity", fill = "steelblue") +  # Simple bar plot
  labs(title = "Number of Cells per Tumor Cell Type",
       x = "Cell Type",
       y = "Number of Cells") +
  theme_minimal()
```
```{r}
# Summarize the number of cells per tumor cell type, grouped by sex
cell_count_data <- metadata %>%
  group_by(Cells_Tumor, Sex) %>%  # Group by cell type and sex
  summarise(Cell_Count = n(), .groups = "drop")  # Count the number of cells per group
```


```{r}
# Plotting the number of cells per tumor cell type, divided by sex
cell_count_plot <- ggplot(cell_count_data, aes(x = Cells_Tumor, y = Cell_Count, fill = Sex)) +
  geom_bar(stat = "identity", position = "dodge") +  # Dodge position to compare counts side by side
  labs(title = "Number of Cells per Cell Type by Sex",
       x = "Cell Type",
       y = "Number of Cells",
       fill = "Sex") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability

# Display the plot
print(cell_count_plot)

# Save the plot as a PDF
ggsave("Cell_Count_by_Sex.pdf", plot = cell_count_plot, width = 8, height = 6)
```

```{r}
# Summarize the number of patients per cell type
patient_count_data <- metadata %>%
  group_by(Cells_Tumor, Patient) %>%  # Group by cell type and patient
  summarise(Present = n() > 0, .groups = "drop") %>%  # Create a column to mark presence of the cell type
  group_by(Cells_Tumor) %>%  # Regroup by cell type
  summarise(Patient_Count = n(), .groups = "drop")  # Count the number of patients per cell type
```

```{r}
# Calculate the total number of unique patients
total_patients <- n_distinct(metadata$Patient)

# Plotting the number of patients per cell type with a horizontal line for total patients
plot <- ggplot(patient_count_data, aes(x = Cells_Tumor, y = Patient_Count)) +
  geom_bar(stat = "identity", fill = "steelblue") +  # Simple bar plot
  geom_hline(yintercept = total_patients, linetype = "dashed", color = "red", size = 1) +  # Add horizontal line
  labs(title = "Number of Patients per Cell Type",
       x = "Cell Type",
       y = "Number of Patients") +
  annotate("text", x = 1, y = total_patients + 3, label = paste("Total Patients:", total_patients), color = "red", hjust = 0) +  # Add label for the line
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability

# Display the plot
print(plot)

# Save the plot as a PDF
ggsave("Patients_by_Cell_Type.pdf", plot = plot, width = 8, height = 6)
```


```{r}
# Strip plot with boxplot overlay
# Jitter plot with boxplot overlay and different colors by sex
plot <- ggplot(metadata, aes(x = Sex, y = pct_chrY, fill = Sex)) +
  geom_jitter(aes(color = Sex), width = 0.2, alpha = 0.5) +  # Jitter plot with color by Sex
  geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.5) +  # Boxplot overlay with fill by Sex
  labs(title = "Percentage of Cell Y Chromosome Geneset Expression by Sex",
       x = "Sex",
       y = "Percentage of Cell Y Chromosome Geneset") +
  ylim(-0.001, 0.0050) +  # Set the y-axis limits
  theme_minimal()
# Display the plot
print(plot)

# Save the plot as a PDF
ggsave("Percentage_Y_Sex.pdf", plot = plot, width = 8, height = 6)
```

```{r}
# Filter the data for male patients
male_metadata <- metadata %>%
  filter(Sex == "Male")

# Plotting pct_chrY for males divided by Patient_ID
plot <- ggplot(male_metadata, aes(x = Patient, y = pct_chrY, fill = Patient)) +
  geom_jitter(width = 0.2, alpha = 0.5) +  # Jitter plot to show individual points
  geom_boxplot(aes(color = Patient), width = 0.3, outlier.shape = NA, alpha = 0.5) +   # Boxplot overlay
  labs(title = "Percentage of Cell Y Chromosome Geneset Expression per Male Patient",
       x = "Patient",
       y = "Percentage of Cell Y Chromosome Geneset Expression") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  +  # Rotate x-axis labels for readability
   guides(color = "none", fill = "none")  # Remove the legend
print(plot)

# Save the plot as a PDF
ggsave("Percentage_Y_Male.pdf", plot = plot, width = 10, height = 6)
```

```{r}
# Filter for male patients and tumor cells
tumor_cells_male <- metadata %>%
  filter(Sex == "Male", Cells_Tumor == "Tumor")  # Adjust "Tumor" to match your specific label for tumor cells

# Calculate the percentage of X0 cells per male patient
percentage_X0_male <- tumor_cells_male %>%
  group_by(Patient) %>%
  summarise(
    Total_Cells = n(),
    X0_Cells = sum(Cell_Dosage == "X0"),  # Count X0 cells
    Percentage_X0 = (X0_Cells / Total_Cells) * 100  # Calculate percentage
  )

# Plot the percentage of X0 tumor cells per male patient
plot <- ggplot(percentage_X0_male, aes(x = Patient, y = Percentage_X0, fill = Patient)) +
  geom_bar(stat = "identity") +  # Bar plot showing percentage of X0 cells
  labs(title = "Percentage of X∅ Tumor Cells per Male Patient",
       x = "Patient ID",
       y = "Percentage of X∅ Tumor Cells (%)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +# Rotate x-axis labels for readability
  guides(color = "none", fill = "none")
print(plot)

# Save the plot as a PDF
#ggsave("Percentage_Y_Male.pdf", plot = plot, width = 10, height = 6)
```


```{r}
# Calculate the percentage of X0 cells per patient and per cell type
percentage_X0_by_cell_type <- metadata %>%
  filter(Sex == "Male") %>%  # Filter for male patients
  group_by(Cells_Tumor, Patient) %>%
  summarise(
    Total_Cells = n(),
    X0_Cells = sum(Cell_Dosage == "X0"),  # Count X0 cells
    Percentage_X0 = (X0_Cells / Total_Cells) * 100  # Calculate percentage
  )

# Plot heterogeneity of X0 percentages across different cell types
plot <- ggplot(percentage_X0_by_cell_type, aes(x = Cells_Tumor, y = Percentage_X0, fill = Cells_Tumor)) +
  geom_boxplot(alpha = 0.6) +  # Boxplot to show distribution
  labs(title = "Heterogeneity of X∅ Cell Percentage Across Cell Types in Male Patients",
       x = "Cell Type",
       y = "Percentage of X∅ Cells (%)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
print(plot)

# Save the plot as a PDF
ggsave("X0_percentage_celltypes.pdf", plot = plot, width = 10, height = 6)
```
```{r}
# Calculate the percentage of X0 cells per patient and per cell type
percentage_X0_by_cell_type <- metadata %>%
  filter(Sex == "Male") %>%  # Filter for male patients
  group_by(Cells_Tumor, Patient) %>%
  summarise(
    Total_Cells = n(),
    X0_Cells = sum(Cell_Dosage == "X0"),  # Count X0 cells
    Percentage_X0 = (X0_Cells / Total_Cells) * 100  # Calculate percentage
  )

# Plot heterogeneity of X0 percentages across different cell types, adding jitter points for patients
ggplot(percentage_X0_by_cell_type, aes(x = Cells_Tumor, y = Percentage_X0, fill = Cells_Tumor)) +
  geom_boxplot(alpha = 0.6, outlier.shape = NA) +  # Boxplot to show distribution without outliers
  geom_jitter(width = 0.2, alpha = 0.6, size = 2, aes(color = Cells_Tumor)) +  # Jitter plot to show individual patients
  labs(title = "Heterogeneity of X∅ Cell Percentage Across Cell Types in Male Patients",
       x = "Cell Type",
       y = "Percentage of X∅ Cells (%)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
print(plot)

# Save the plot as a PDF
ggsave("X0_percentage_celltypes.pdf", plot = plot, width = 10, height = 6)
```

```{r}
library(ggplot2)
# Assuming the GSVA score for Y chromosome is in a column named 'GSVA_Score_Y'
# and that 'Patient_ID' and 'Sex' are already present in the metadata dataframe.

# Create the plot showing GSVA score for Y chromosome colored by Sex
ggplot(metadata, aes(x = reorder(Patient, Ychrom), y = Ychrom, fill = Sex)) +
  geom_bar(stat = "identity") +  # Bar plot for GSVA scores
  coord_flip() +  # Flip coordinates to make horizontal bars
  scale_fill_manual(values = c("Female" = "salmon", "Male" = "turquoise")) +  # Custom colors for Sex
  labs(title = "GSVA Score for Y Chromosome Gene Set by Patient",
       x = "Patient",
       y = "Y Chromosome Gene Set Expression") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 10))
```

```{r}
HNSC_combined_Y <- readRDS("/omics/odcf/analysis/OE0509_projects/hnscc/single_cell/Single_Cell_Analysis/Single_Cell_Datasets/All_Cells_Together/Integration/HNSC_combined_Y.rds")
metadata <- HNSC_combined_Y@meta.data
```

```{r}
tumor <- subset(HNSC_combined_Y, subset = Cells_Tumor == "Tumor")
GeneSetCollection <- getGmt("/omics/odcf/analysis/OE0509_projects/hnscc/Gender_Analysis/Male/TCGA/EDY/genesignature_Y_chromosome.gmt")
```


```{r}
bulk <- Seurat:::PseudobulkExpression(object = tumor, pb.method = 'aggregate', slot = 'counts', group.by = "Patient")
GSVA <- gsva((as.matrix(bulk$RNA)), GeneSetCollection, method = "gsva", annotation = "org.Hs.eg.db", min.sz=5, max.sz=500, parallel.sz = 4, kcdf="Poisson")
```

```{r}
GSVA <- as.data.frame(t(GSVA))
GSVA$Patient <- rownames(GSVA)
sex_data <- unique(metadata[, c("Patient", "Sex")])
GSVA <- merge(GSVA, sex_data, by = "Patient", all.x = TRUE)
```

```{r}
library(ggplot2)
# Assuming the GSVA score for Y chromosome is in a column named 'GSVA_Score_Y'
# and that 'Patient_ID' and 'Sex' are already present in the metadata dataframe.

# Create the plot showing GSVA score for Y chromosome colored by Sex
ggplot(metadata, aes(x = Patient, y = Y_Chrom, fill = Sex)) +
  geom_bar(stat = "identity") +  # Bar plot for GSVA scores
  coord_flip() +  # Flip coordinates to make horizontal bars
  scale_fill_manual(values = c("Female" = "salmon", "Male" = "turquoise")) +  # Custom colors for Sex
  labs(title = "GSVA Score for Y Chromosome Gene Set by Patient",
       x = "Patient",
       y = "Y Chromosome Gene Set Expression") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 10))
```

```{r}
# Load necessary libraries
library(dplyr)
library(ggplot2)

# Step 1: Filter only male patients
tumor_male <- subset(HNSC_combined_Y, subset = Cells_Tumor == "Tumor" & Sex == "Male")

# Step 2: Split the dataset by HPV status and perform pseudobulk separately
# For HPV-negative patients
tumor_male_HPV_neg <- subset(tumor_male, HPV == "HPV-")
bulk_neg <- Seurat:::PseudobulkExpression(object = tumor_male_HPV_neg, pb.method = 'aggregate', slot = 'counts', group.by = "Patient")
GSVA_neg <- gsva((as.matrix(bulk_neg$RNA)), GeneSetCollection, method = "gsva", annotation = "org.Hs.eg.db", min.sz = 5, max.sz = 500, parallel.sz = 4, kcdf = "Poisson")

# For HPV-positive patients
tumor_male_HPV_pos <- subset(tumor_male, HPV == "HPV+")
bulk_pos <- Seurat:::PseudobulkExpression(object = tumor_male_HPV_pos, pb.method = 'aggregate', slot = 'counts', group.by = "Patient")
GSVA_pos <- gsva((as.matrix(bulk_pos$RNA)), GeneSetCollection, method = "gsva", annotation = "org.Hs.eg.db", min.sz = 5, max.sz = 500, parallel.sz = 4, kcdf = "Poisson")

# Step 3: Convert GSVA scores to data frames and add the Patient ID and HPV status
GSVA_neg <- as.data.frame(t(GSVA_neg))
GSVA_neg$Patient <- rownames(GSVA_neg)
GSVA_neg$HPV <- "HPV-"

GSVA_pos <- as.data.frame(t(GSVA_pos))
GSVA_pos$Patient <- rownames(GSVA_pos)
GSVA_pos$HPV <- "HPV+"

# Step 4: Combine the GSVA scores for HPV-negative and HPV-positive patients
GSVA_combined <- bind_rows(GSVA_neg, GSVA_pos)

# Step 5: Add Sex and other metadata (if needed)
sex_data <- unique(metadata[, c("Patient", "Sex")])
GSVA_combined <- merge(GSVA_combined, sex_data, by = "Patient", all.x = TRUE)

# Step 6: Create groupings for Y_Chrom (Low, Intermediate, High) based on quantiles per HPV group
GSVA_combined <- GSVA_combined %>%
  group_by(HPV) %>%
  mutate(Group = case_when(
    Y_Chrom <= quantile(Y_Chrom, 0.33, na.rm = TRUE) ~ "Low",
    Y_Chrom <= quantile(Y_Chrom, 0.66, na.rm = TRUE) ~ "Intermediate",
    TRUE ~ "High"
  )) %>%
  ungroup()

# Step 7: Plot the GSVA scores for Y chromosome by patient, faceted by HPV status, and grouped by Y_Chrom quantiles
plot <- ggplot(GSVA_combined, aes(x = reorder(Patient, Y_Chrom), y = Y_Chrom, fill = Group)) +
  geom_bar(stat = "identity") +  # Bar plot for Y_Chrom scores
  coord_flip() +  # Flip coordinates to make horizontal bars
  scale_fill_manual(values = c("Low" = "deepskyblue", "Intermediate" = "darkolivegreen3", "High" = "coral1")) +  # Custom colors for groups
  labs(title = "Y Chromosome Gene Set Expression by Patient and HPV Status",
       x = "Patient",
       y = "Y Chromosome Gene Set Expression") +
  facet_wrap(~HPV, scales = "free_y", ncol = 2) +  # Facet by HPV status
  theme_minimal() +
  theme(axis.text.y = element_text(size = 10))

# Print the plot
print(plot)

# Save the plot as a PDF
#ggsave("HPV_GSVA_classification.pdf", plot = plot, width = 10, height = 6)
```



```{r}
# Step 1: Filter only male patients
tumor_male <- subset(HNSC_combined_Y, subset = Cells_Tumor == "Tumor" & Sex == "Male")
metadata <- subset(HNSC_combined_Y@meta.data)

bulk <- Seurat:::PseudobulkExpression(object = tumor_male, pb.method = 'aggregate', slot = 'counts', group.by = "Patient")
GSVA <- gsva((as.matrix(bulk$RNA)), GeneSetCollection, method = "gsva", annotation = "org.Hs.eg.db", min.sz = 5, max.sz = 500, parallel.sz = 4, kcdf = "Poisson")
GSVA<- as.data.frame(t(GSVA))
GSVA$Patient <- rownames(GSVA)
hpv_data <- unique(metadata[, c("Patient", "HPV")])
GSVA <- merge(GSVA, hpv_data, by = "Patient", all.x = TRUE)
sex_data <- unique(metadata[, c("Patient", "Sex")])
GSVA <- merge(GSVA, sex_data, by = "Patient", all.x = TRUE)

# Step 1: Filter tumor cells and calculate proportions for both XØ and XY cells based on pct_chrY
metadata_tumor <- metadata %>%
  filter(Cells_Tumor == "Tumor") %>%
  group_by(Patient) %>%
  dplyr::summarise(
    Total_Tumor_Cells = n(),  # Total number of tumor cells per patient
    X0_Cells = sum(pct_chrY == 0, na.rm = TRUE),  # Count cells with 0 pct_chrY as XØ
    Proportion_X0 = X0_Cells / Total_Tumor_Cells,  # Proportion of XØ cells
    Proportion_XY = 1 - Proportion_X0  # Proportion of XY cells as complement
  )

# Step 2: Reshape data for plotting (long format)
metadata_tumor_long <- metadata_tumor %>%
  tidyr::pivot_longer(cols = c(Proportion_X0, Proportion_XY), names_to = "XY_Status", values_to = "Proportion")

# Step 3: Merge with the GSVA data and HPV status
GSVA_combined <- merge(GSVA, metadata_tumor_long, by = "Patient")
GSVA_combined <- merge(GSVA_combined, unique(metadata[, c("Patient", "HPV")]), by = "Patient")

# Step 4: Plot the data with normalized proportions using geom_bar(position = "fill")
plot <- ggplot(GSVA_combined, aes(x = reorder(Patient, Y_Chrom), y = Proportion, fill = XY_Status)) + 
  geom_bar(stat = "identity", position = "fill") +  # Normalize the bars to show proportions
  labs(title = "Proportion of XØ and XY Tumor Cells by Patient, Ordered by Y Chromosome GSVA Score",
       x = "Patient",
       y = "Proportion of Cells") + 
  facet_grid(. ~ HPV.x) +  # Facet by HPV status
  theme_minimal() +
  theme(axis.text.x = element_blank(),  # Remove x-axis labels for cleaner look
        axis.ticks.x = element_blank(),
        strip.text = element_text(size = 12),
        legend.position = "right")

# Print the plot
print(plot)

# Save the plot as a PDF
ggsave("XY_X0_GSVA_proportion_plot.pdf", plot = plot, width = 12, height = 6)
```

